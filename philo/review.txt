===cord_review===
1. 色分け
2. コメントあるのが良い

===============2024.02.05===================
more点
1. philoのファイルのディレクトリ構造を分けたほうが良さそう
→フォルダ分け（ファイルも見つけやすくなる）
例）headerとsrcに分けるとか

2. srcの中でもメインロジックとそうでないものがある
mkdir libとか作って、その中にutils入れる
mainロジックはphiloに入れる

3. argv[]に何が入るかわかりにくい
→場面を想像して実装してみる
　　→structを作る（先に型を定義して、エラーが出ないようにする）
解決策❶
・コメントを書く（argv[1]の中にはこれが入っているとか）
・READMEに書く
   （最低限書くのは実行の仕方、テストの仕方。追加で仕様を書くかどうかが分かれ目。
    理想としてはこれを読んだ人がこういうプログラムなんだなと分かる、操作のしかたがわかるような状態。
    見た人目線で書いていく）
解決策❷
・一つ目にstruct定義をする関数作成（中身に何が入っているかがわかる）
・二つ目にその次にinit関数作成

===========================================
4. チャレンジ課題
・色分けを拡張できれば良さそう。
　→色の意味を定義
・エラーはredだから、他の関数においても意味付けする
（enumで定義して、それを使ったり。）
・色が何の関数と紐づいているのかを定義する
→新しいログを追加するときに、どのように色を定義するかが分かるようにするため

・エラーがいくつかあるので（error_print.c）まとめて、エラーを出力する関数を作る
→保守性向上

・構造体名も意識！（42では構造体はs_で始まり、t_で終わるようにするというルールがあるが、
今後エンジニアとして働いていく場合は構造体名も意識する！）
===========================================

2/16までに提出
